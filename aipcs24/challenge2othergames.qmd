---
title: "Challenge 2: Other Games"
sidebar: aipcs24
format:
  html:
    math: true
---

<div id="bandit-container">
  <table id="bandit-table">
    <thead>
      <tr>
        <th>Arm</th>
        <th>Average Reward</th>
        <th>Pulls</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="arms-container">
    </tbody>
  </table>
  <div id="stats-container"></div>
  <button id="reset-button">Reset</button>
</div>
<div id="debug-output"></div>

```{=html}
<script>
document.addEventListener('DOMContentLoaded', (event) => {
  const debug = (message) => {
    document.getElementById('debug-output').innerHTML += message + '<br>';
  };

  debug('Script started');

  class Arm {
    constructor(id) {
      this.id = id;
      this.q = Math.random() * 2 - 1; // Approximation of N(0, 1)
      this.pulls = 0;
      this.totalReward = 0;
    }

    pull() {
      this.pulls++;
      const reward = this.q + (Math.random() * 2 - 1); // Approximation of N(q, 1)
      this.totalReward += reward;
      return reward;
    }

    get averageReward() {
      return this.pulls === 0 ? 0 : this.totalReward / this.pulls;
    }
  }

  class Bandit {
    constructor(numArms) {
      this.arms = Array.from({length: numArms}, (_, i) => new Arm(i + 1));
      this.totalPulls = 0;
      this.totalReward = 0;
    }

    pullArm(armId, times = 1) {
      const arm = this.arms[armId - 1];
      let totalReward = 0;
      const actualPulls = Math.min(times, 1000 - this.totalPulls);
      for (let i = 0; i < actualPulls; i++) {
        totalReward += arm.pull();
        this.totalPulls++;
        this.totalReward += totalReward;
      }
      return totalReward;
    }

    reset() {
      this.arms.forEach(arm => {
        arm.q = Math.random() * 2 - 1;
        arm.pulls = 0;
        arm.totalReward = 0;
      });
      this.totalPulls = 0;
      this.totalReward = 0;
    }
  }

  const bandit = new Bandit(10);
  const armsContainer = document.getElementById('arms-container');
  const statsContainer = document.getElementById('stats-container');
  const resetButton = document.getElementById('reset-button');

  debug('Bandit created');

  function updateStats() {
    statsContainer.innerHTML = `
      <p>Total Pulls: ${bandit.totalPulls}</p>
      <p>Total Reward: ${bandit.totalReward.toFixed(2)}</p>
      <p>Average Reward: ${(bandit.totalReward / bandit.totalPulls || 0).toFixed(2)}</p>
    `;
  }

  function createArmRows() {
    armsContainer.innerHTML = '';
    bandit.arms.forEach(arm => {
      const row = document.createElement('tr');
      
      const armIdCell = document.createElement('td');
      armIdCell.textContent = `Arm ${arm.id}`;
      
      const avgRewardCell = document.createElement('td');
      avgRewardCell.id = `arm-avg-${arm.id}`;
      
      const pullsCell = document.createElement('td');
      pullsCell.id = `arm-pulls-${arm.id}`;
      
      const actionsCell = document.createElement('td');
      ['1', '10', '100', 'Max'].forEach(pullAmount => {
        const button = document.createElement('button');
        button.textContent = pullAmount;
        button.onclick = () => {
          const pulls = pullAmount === 'Max' ? 1000 : parseInt(pullAmount);
          const reward = bandit.pullArm(arm.id, pulls);
          updateStats();
          updateArmStats(arm);
          debug(`Pulled arm ${arm.id} ${pulls} times, total reward: ${reward.toFixed(2)}`);
        };
        actionsCell.appendChild(button);
      });
      
      row.appendChild(armIdCell);
      row.appendChild(avgRewardCell);
      row.appendChild(pullsCell);
      row.appendChild(actionsCell);
      
      armsContainer.appendChild(row);
      updateArmStats(arm);
    });
    debug('Arm rows created');
  }

  function updateArmStats(arm) {
    document.getElementById(`arm-avg-${arm.id}`).textContent = arm.averageReward.toFixed(2);
    document.getElementById(`arm-pulls-${arm.id}`).textContent = arm.pulls;
  }

  resetButton.onclick = () => {
    bandit.reset();
    updateStats();
    createArmRows();
    debug('Bandit reset');
  };

  createArmRows();
  updateStats();
  debug('Initial setup complete');
});
</script>

<style>
#bandit-container {
  font-family: Arial, sans-serif;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

#bandit-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

#bandit-table th, #bandit-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

#bandit-table th {
  background-color: #f2f2f2;
}

#bandit-table button {
  margin-right: 5px;
}

#stats-container {
  background-color: #f0f0f0;
  padding: 15px;
  border-radius: 5px;
  margin-bottom: 20px;
}

#reset-button {
  display: block;
  margin: 0 auto;
  padding: 10px 20px;
  font-size: 18px;
}

#debug-output {
  margin-top: 20px;
  padding: 10px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
}
</style>