---
title: "#1: Kuhn Poker | Challenge (Part 2)"
sidebar: aipcs24
format:
  html:
    math: true
    css: styles.css
    header-includes: |
      <script src="https://d3js.org/d3.v7.min.js"></script>
---
## Challenge Part 2: Automatic Solver
<div id="locked_message">
  This section is locked until you complete <a href=1kuhn_challenge.html#part-1-manual-solutions>part 1</a>.
</div>

<div id="lock_this" style="display:none;">
:::{.callout-note  appearance="minimal"}
## Challenge part 2: submission and leaderboard

<p>The strategy that you used to unlock this stage has been submitted to the leaderboard; you can see it as name <span class=showUserName style="font-weight: bold">[undefined]</span> below. You can resubmit to replace it with another strategy as many times as you like using the "Submit" button below. The preceding sentences will be true when the challenge goes live, expect Tuesday or Wednesday.</p>

Next, use the automatic solver tool below to refine your strategies for each player in terms of the fixed action probabilities at each player's infosets. For this challenge, we recommend that you submit strategies that form a Nash equilibrium (or equivalently, a pair of strategies such that neither player has regret).

Once you have a strategy that you believe improves on your current submission, you can re-submit and wait for the results to be re-run (which may take some minutes).
:::

<div id="tree_visualization_400b" class="tree_visualization"></div>
 
:::{.callout-tip collapse="true" appearance="minimal"}
## Solver controls
 
- The site should save your progress if you navigate away or refresh, though might lose the last few edits, depending.
- It doesn't have any help for sharing solutions between teammates, sorry.
- At each iteration, the solver will update all 12 nodes (in some arbitrary order), using a rule modified by the update parameters:
  - a magnitude multiplier
  - how to scale the update based on EV (currently supports: no effect or linearly)
  - how to scale the update based on the infoset's visit probability (currently supports: no effect or linearly)
  - whether to use a learning rate to decay the magnitude over time (currently supports: no decay, or linear in the sum of updates made to this infoset since reset)
  - whether to update probability or odds
- You can set it to run for a number of iterations. (If you accidentally set it to too many, you can stop the solver by pressing "Stop" or by reloading the page.)
- Speed is hopefully self-explanatory.
- Tolerance controls the difference between action EVs that is too small to update on.
:::
 
<div id="simulation_controls" style="border: 1px solid black; padding-top: 0.5em; padding-left: 0.5em; margin-bottom: 1em; width: 42.9em;e">
<div style="display: inline-block; margin-right: 1em;">
  <label for="update_mode" style="margin-right: 0.1em;">Update:</label>
  <select id="update_factor" style="padding: 0.2em; width: 6.6em;">
    <option value="1.0" selected="selected">100%</option>
    <option value="0.1">10%</option>
    <option value="0.01">1%</option>
    <option value="0.001">0.1%</option>
    <option value="0.0001">0.01%</option>
    <option value="0.00001">0.001%</option>
  </select>
  <select id="scale_by_ev" style="padding: 0.2em; width: 6.6em;">
    <option value="false" selected="selected">×1</option>
    <option value="true">×EVdiff</option>
  </select>
  <select id="scale_by_visit_prob" style="padding: 0.2em; width: 6.6em;">
    <option value="false" selected="selected">×1</option>
    <option value="true">×p(visit)</option>
  </select>
  <select id="scale_by_total_updates" style="padding: 0.2em; width: 6.6em;">
    <option value="false" selected="selected">×1</option>
    <option value="true">/Σupdates</option>
  </select>
  <select id="use_odds" style="padding: 0.2em; width: 6.6em;">
    <option value="false" selected="selected">probability</option>
    <option value="true">odds</option>
  </select>
</div>
<div> 
<div style="display: inline-block; margin-right: 0.8em;">
  <button id="start_simulator" style="padding: 0.5em 1em; color: white; background-color: #2fa4e7" onclick="startSimulator()">Run Solver</button>
</div>
<div style="display: inline-block; margin-right: 1em; font-size: 0.8em;">
  <label for="num_iterations" style="margin-right: 0.1em;">Iterations:</label>
  <select id="num_iterations" style="padding: 0.2em;">
    <option value="1" selected="selected">1</option>
    <option value="10">10</option>
    <option value="100">100</option>
    <option value="1000">1,000</option>
    <option value="10000">10,000</option>
    <option value="100000">100,000</option>
  </select>
</div>
      
<div style="display: inline-block; margin-right: 1em; font-size: 0.8em;">
  <label for="wait_per_step" style="margin-right: 0.1em;">Speed:</label>
  <select id="wait_per_step" style="padding: 0.2em;">
    <option value="0" selected="selected">Max</option>
    <option value="10">Fast</option>
    <option value="100">10/sec</option>
    <option value="333">3/sec</option>
    <option value="1000">1/sec</option>
  </select>
</div>
      
<div style="display: inline-block; margin-right: 1em; font-size: 0.8em;">
  <label for="tolerance" style="margin-right: 0.1em;">Tolerance:</label>
  <select id="tolerance" style="padding: 0.2em;">
    <option value="0.3">0.30 chip</option>
    <option value="0.1">0.10 chip</option>
    <option value="0.03">0.03 chip</option>
    <option value="0.01" selected="selected">0.01 chip</option>
    <option value="0.003">0.003 chip</option>
</select>
</div>
</div>
</div>

<div id="subtree_visualizations" style="max-width: 750px;"></div>

<style>
.history-table {
  font-family: Arial, sans-serif;
  font-size: 10px;
}

.history-table th, .history-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: right;
}

.history-table th {
  text-align: center;
}

.history-table th {
  background-color: #f2f2f2;
  font-weight: bold;
}

.history-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.history-table tr:hover {
  background-color: #f5f5f5;
}

.copy-button {
  position: absolute;
  top: 25px;
  left: 5px;
  z-index: 1000;
  background-color: rgba(240, 240, 240, 0.8);
  border: 1px solid #ccc;
  border-radius: 4px;
  color: #666;
  cursor: pointer;
  font-size: 18px;
  padding: 1px;
  transition: all 0.3s ease;
}

.copy-button:hover {
  background-color: rgba(224, 224, 224, 0.9);
  color: #333;
}

.copy-button:active {
  background-color: rgba(208, 208, 208, 1);
}

.history-table {
  margin-top: 0px;
}
</style>

:::{.callout-tip collapse="true"  appearance="minimal"}
## Solver history

<div style="display: inline-block; margin-right: 1em; font-size: 0.8em;">
  <label for="log_basic" style="margin-right: 0.1em;">Log:</label>
  <input type="checkbox" id="log_basic" style="padding: 0.2em;"></input>
  <span>(this slows the solver down somewhat)</span>
</div>

### Strategy probabilities

<div style="position: relative; max-height: 25vh; overflow-y: auto; margin-top: 20px;">
  <button id="copy-table-button" class="copy-button" aria-label="Copy table to clipboard" title="Copy table to clipboard">&#128203;</button>
  <table id="strategy-history-table" class="history-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th>Strategy</th>
        <th>A_</th>
        <th>K_</th>
        <th>Q_</th>
        <th>_A↑</th>
        <th>_A↓</th>
        <th>_K↑</th>
        <th>_K↓</th>
        <th>_Q↑</th>
        <th>_Q↓</th>
        <th>A_↓↑</th>
        <th>K_↓↑</th>
        <th>Q_↓↑</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

### EV

<div style="position: relative; max-height: 25vh; overflow-y: auto; margin-top: 20px;">
  <!--<button id="copy-table-button" class="copy-button" aria-label="Copy table to clipboard" title="Copy table to clipboard">&#128203;</button>-->
  <table id="ev-history-table" class="history-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th>EV</th>
        <th>A_</th>
        <th>K_</th>
        <th>Q_</th>
        <th>_A↑</th>
        <th>_A↓</th>
        <th>_K↑</th>
        <th>_K↓</th>
        <th>_Q↑</th>
        <th>_Q↓</th>
        <th>A_↓↑</th>
        <th>K_↓↑</th>
        <th>Q_↓↑</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

### Other

<div style="display: inline-block; margin-right: 1em; font-size: 0.8em;">
  <label for="log_all" style="margin-right: 0.1em;">Log all:</label>
  <input type="checkbox" id="log_all" style="padding: 0.2em;"></input>
  <span>(this slows the solver down significantly)</span>
</div>

:::{.callout-tip collapse="true"  appearance="minimal"}
## Other logs

#### EV(action=<span class=action>↑Up</span>)

<div style="position: relative; max-height: 25vh; overflow-y: auto; margin-top: 20px;">
  <!--<button id="copy-table-button" class="copy-button" aria-label="Copy table to clipboard" title="Copy table to clipboard">&#128203;</button>-->
  <table id="ev-action-up-history-table" class="history-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th>EV(action=<span class=action>↑Up</span>)</th>
        <th>A_</th>
        <th>K_</th>
        <th>Q_</th>
        <th>_A↑</th>
        <th>_A↓</th>
        <th>_K↑</th>
        <th>_K↓</th>
        <th>_Q↑</th>
        <th>_Q↓</th>
        <th>A_↓↑</th>
        <th>K_↓↑</th>
        <th>Q_↓↑</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

#### EV(action=<span class=action>↓Down</span>)

<div style="position: relative; max-height: 25vh; overflow-y: auto; margin-top: 20px;">
  <!--<button id="copy-table-button" class="copy-button" aria-label="Copy table to clipboard" title="Copy table to clipboard">&#128203;</button>-->
  <table id="ev-action-down-history-table" class="history-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th>EV(action=<span class=action>↓Down</span>)</th>
        <th>A_</th>
        <th>K_</th>
        <th>Q_</th>
        <th>_A↑</th>
        <th>_A↓</th>
        <th>_K↑</th>
        <th>_K↓</th>
        <th>_Q↑</th>
        <th>_Q↓</th>
        <th>A_↓↑</th>
        <th>K_↓↑</th>
        <th>Q_↓↑</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

#### Visit probabilities

<div style="position: relative; max-height: 25vh; overflow-y: auto; margin-top: 20px;">
  <!--<button id="copy-table-button" class="copy-button" aria-label="Copy table to clipboard" title="Copy table to clipboard">&#128203;</button>-->
  <table id="visit-probability-history-table" class="history-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th>Visit Prob</th>
        <th>A_</th>
        <th>K_</th>
        <th>Q_</th>
        <th>_A↑</th>
        <th>_A↓</th>
        <th>_K↑</th>
        <th>_K↓</th>
        <th>_Q↑</th>
        <th>_Q↓</th>
        <th>A_↓↑</th>
        <th>K_↓↑</th>
        <th>Q_↓↑</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

#### Total Updates

<div style="position: relative; max-height: 25vh; overflow-y: auto; margin-top: 20px;">
  <!--<button id="copy-table-button" class="copy-button" aria-label="Copy table to clipboard" title="Copy table to clipboard">&#128203;</button>-->
  <table id="total-updates-history-table" class="history-table" style="width: 100%; border-collapse: collapse;">
    <thead>
      <tr>
        <th>Total Updates</th>
        <th>A_</th>
        <th>K_</th>
        <th>Q_</th>
        <th>_A↑</th>
        <th>_A↓</th>
        <th>_K↑</th>
        <th>_K↓</th>
        <th>_Q↑</th>
        <th>_Q↓</th>
        <th>A_↓↑</th>
        <th>K_↓↑</th>
        <th>Q_↓↑</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>
:::

:::

:::{.callout-note  appearance="minimal"}
## Ponder...

The solver's algorithm is a reinforcement-learning approach that you will use some version of for the rest of the course. Unfortunately, the vanilla version that this page defaults to doesn't converge.

The solver controls will let you tweak how the algorithm determines the size of the updates, which is critical to having the convergence behavior you want. Try to find a setting of the controls that converges to a good solution.

For this task you will almost certainly want to look at the history of updates represented in the "Solver history" box above.

While Kuhn Poker is small enough to solve by hand or by manual trial-and-error, having an efficient and effective (and converging!) algorithm for learning better strategies is going to be key in later weeks.
:::

:::{.callout-note  appearance="minimal"}
## Beta Note

This week's challenge (submit a strategy) has drifted apart somewhat from the lesson we tried to build up to (exploring the nuances of reinforcement-update algorithms). Our current thinking is that this would be better if the challenge were actually to submit 100-card Kuhn Poker, which would do a better job of applying the answer to "how does a good solver update?"

Unfortunately, we ran out of time to implement the 100-card Kuhn Poker train / test tournament.
:::

### Submit to leaderboard

:::{.callout-note  appearance="minimal"}
## Beta Note

Re-running the tournament currently takes between one and three minutes, and there's no indication that it's done except the board changing. In some cases, you may have to refresh the page to see changes. Working on improvements.
:::

<script>
function submitAndScheduleFetches() {
    submit_probabilities();

    setTimeout(fetchLeaderboard, 60000);  // 60000 ms = 1 minute
    setTimeout(fetchLeaderboard, 120000); // 120000 ms = 2 minutes
}
</script>

<button id="submit_strategy" style="padding: 0.5em 1em; color: white; background-color: #2fa4e7" onclick="submitAndScheduleFetches()">Update Strategy Submission</button>

<style>
    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 20px;
        background-color: #f4f4f4;
    }
    .container {
        max-width: 800px;
        margin: auto;
        background: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    h1 {
        color: #333;
        text-align: center;
    }
    .group {
        margin-bottom: 20px;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
    }
    .group-header {
        background-color: #f0f0f0;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 3px;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
</style>

<div id="leaderboard"></div>

<script>
  function fetchLeaderboard() {
    fetch('https://pokercamp-staff-dev1.rossry.net:1443/leaderboard')
      .then(response => response.json())
      .then(data => {
        const leaderboardDiv = document.getElementById('leaderboard');
        leaderboardDiv.innerHTML = '';

        data.forEach(group => {
          const groupDiv = document.createElement('div');
          groupDiv.className = 'group';

          const groupHeader = document.createElement('div');
          groupHeader.className = 'group-header';
          groupHeader.innerHTML =
            (group.to_place == group.from_place) ?
            `Place ${group.from_place} (Score: ${group.from_score.toFixed(1)})`
            : `Places ${group.from_place}-${group.to_place} (Scores: ${group.to_score.toFixed(1)} to ${group.from_score.toFixed(1)})`;
          groupDiv.appendChild(groupHeader);

          const table = document.createElement('table');
          table.innerHTML = `
              <tr>
                  <th>Place</th>
                  <th>Name</th>
                  <th>Score per 100 hands</th>
              </tr>
          `;

          group.players.sort((a, b) => b.mean - a.mean);

          group.players.forEach((player, index) => {
              const row = table.insertRow();
              row.className = player.name.toLowerCase();
              row.innerHTML = `
                  <td>${group.to_place==group.from_place ? "" : "Tie-"}${group.from_place}</td>
                  <td>${player.name}</td>
                  <td>${player.mean>0?"+":""}${player.mean.toFixed(1)} (&pm;${player.stderr.toFixed(2)})</td>
              `;
          });

          groupDiv.appendChild(table);
          leaderboardDiv.appendChild(groupDiv);
        });
        
        document.querySelectorAll("." + localStorage.getItem('userNameDisplay')).forEach(element => {
          element.style.backgroundColor = "#FFFFBB";
        });
      })
      .catch(error => {
        console.error('Error fetching leaderboard:', error);
        document.getElementById('leaderboard').innerHTML = 'Error loading leaderboard data.';
      });
  }

  fetchLeaderboard();
</script>

:::{.callout-tip collapse="true"  appearance="minimal"}
## More &rarr;

If you've finished all of the above, we'd like to hear about it (and any questions you still have&mdash;which we expect you do. Then you can do any of:

- Wait for next week's material next week.
- Help other students with their confusions and stuck points (and let us know how we could have improved!).
- Get a start on the next segment of the course by writing a bot that can learn from your opponent's moves and do better than Nash against them. (For this, see the instructors for info on setting up the games environment on your own computer.)
:::
</div>

<script>
  function unlock_next() {
      document.getElementById("locked_message").style.display = "none";
      document.getElementById("lock_this").style.display = "";
  };
</script>

<script src="index.js"></script>
<script>
  /* global create_tree */
  create_tree("tree_visualization_400b", 4.0, true);
  
  let has_autosubmit = localStorage.getItem('has_autosubmit');
  
  if (!has_autosubmit) {
    submit_probabilities();
    localStorage.setItem('has_autosubmit', true);
  }
</script>
