---
title: "#1: Kuhn Poker | Challenge (Part 1)"
sidebar: aipcs24
format:
  html:
    math: true
    css: styles.css
    header-includes: |
      <script src="https://d3js.org/d3.v7.min.js"></script>
---
<div class="lock_this" style="display:none">
  <p><a href=1kuhn_challenge2.html>Enter Part 2 (unlocked) &rarr;</a></p>
</div>

## Pre-Challenge: Visualizing a game tree
To analyze Kuhn Poker further, we'll represent the game in terms of a visual game tree. This would be infeasible for a game that was much more complicated, but here it will hopefully let us visualize what is going on.

First, deal one card to <span class="player p1"></span> and one card to <span class="player p2"></span>. Each possible deal of the cards forms a separate "game node". For example, <span class=gamenode>AK</span> means that <span class="player p1"></span> has <span class=gamenode>A</span> and <span class="player p2"></span> has <span class=gamenode>K</span>:
    
<div id="tree_visualization_075" class="tree_visualization"></div>
    
<span class="player p1"></span> will act first. He knows what his card is, but not what card <span class="player p2"></span> has, so he can be in one of 3 infosets. We'll name them <span class="p1 infoset">A_</span>, <span class="p1 infoset">K_</span>, and <span class="p1 infoset">Q_</span> based on what card he holds:
    
<div id="tree_visualization_100" class="tree_visualization"></div>
    
At each infoset, <span class="player p1"></span> can choose <span class=action>↑Up</span> or <span class=action>↓Down</span>. Note that the probaility with which he chooses <span class=action>↑Up</span> (versus <span class=action>↓Down</span>) from a given infoset will have to be the same for _both nodes_, since they are indistinguishable to <span class="player p1"></span>.

<div id="tree_visualization_150" class="tree_visualization"></div>

Each <span class=action>↑Up</span> or <span class=action>↓Down</span> action will each take us to a distinct game node, based on a unique set of cards and action history:

<div id="tree_visualization_175" class="tree_visualization"></div>

Next, <span class="player p2"></span> will act. He can observe his card and <span class="player p1"></span>'s first action, but not <span class="player p1"></span>'s card, so those pieces of information characterize his infoset. We'll give <span class="player p2"></span>'s 6 infosets names like <span class="p2 infoset">_K↓</span> and <span class="p2 infoset">_Q↑</span> based on his card and the action:
  
<div id="tree_visualization_200" class="tree_visualization"></div>
    
At each of these infosets, <span class="player p2"></span> can choose <span class=action>↑Up</span> or <span class=action>↓Down</span>:
    
<div id="tree_visualization_250" class="tree_visualization"></div>
    
If the actions were <span class=action>↓Down</span>, <span class=action>↑Up</span></abbr> ("check&ndash;bet"), then <span class="player p1"></span> will have to act again. Otherwise, the game is now over (with a payoff determined by the cards and the action sequence). Recall the 5 sequences of betting, which end either in one player folding (after an <span class=action>↑Up</span> then <span class=action>↓Down</span>, a "bet&ndash;fold") or the higher card winning at _showdown_, which results from either two <span class=action>↓Down</span>s ("check&ndash;check") or two <span class=action>↑Up</span>s ("bet&ndash;call").

We'll write the payoffs from <span class="player p1"></span>'s perspective, and remember that <span class="player p2"></span>'s payoffs will be the inverse:

<div id="tree_visualization_275" class="tree_visualization"></div>

 If <span class="player p1"></span> still has to act, he'll be in one of just three infosets, <span class="p1 infoset">A_↓↑</span>, <span class="p1 infoset">K_↓↑</span>, or <span class="p1 infoset">Q_↓↑</span>:
    
<div id="tree_visualization_300" class="tree_visualization"></div>
    
...and can choose <span class=action>↑Up</span> or <span class=action>↓Down</span>...
    
<div id="tree_visualization_350" class="tree_visualization"></div>
    
...but whatever he chooses, the game will end after that move. We now have the entire game tree for Kuhn Poker: 
    
<div id="tree_visualization_400a" class="tree_visualization"></div>

## Kuhn Poker strategies
    
Each player's strategy can be completely described in terms of their action probabilities at each infoset (6 of them per player).

### Example 1: Determining a local best response

Let's start by considering <span class="player p1"></span>'s decision at the infoset <span class="infoset p1">K_↓↑</span>. When <span class="player p1"></span> is at <span class="infoset p1">K_↓↑</span>, he doesn't know whether the true state of the world is <span class=gamenode>KA_↓↑</span> or <span class=gamenode>KQ_↓↑</span>. This is what the game looks like from <span class="player p1"></span>'s perspective: 

![](assets/k_down_up.png)

As we said earlier, whatever action (or randomized mix of actions) <span class="player p1"></span>'s strategy says to make, he will be doing so in all of the situations where he arrives at <span class="infoset p1">K_↓↑</span>, without the ability to do different things at <span class=gamenode>KA_↓↑</span> vs <span class=gamenode>KQ_↓↑</span>.

<div class="duplicate_K_↓↑"></div>

<div class="duplicate_player_evs"></div>

If we start by assuming that both players play 50-50 randomly (50% <span class=action>↑Up</span> at each infoset), then <span class="player p1"></span> would arrive at <span class="infoset p1">K_↓↑</span> via <span class=gamenode>KA↓↑</span> equally often as via <span class=gamenode>KQ↓↑</span>. In this case, his expected payoff for playing <span class=action>↑Up</span> is a 50%-50% weighted sum of the payoffs <span class=gamenode>KA↓↑↑</span> (<span class="player_label p1">-2</span>, calling with <span class=gamenode>K</span> when opponent has <span class=gamenode>A</span> and losing at showdown) and <span class=gamenode>KQ↓↑↑</span> (<span class="player_label p1">+2</span>, calling with <span class=gamenode>K</span> when opponent has <span class=gamenode>Q</span> and winning at showdown), for an expected value of <span class="player_label p1">0</span>. 

Similarly, his expected payoff for <span class=action>↓Down</span> is a 50%-50% weighted sum of the payoffs for <span class=gamenode>KA↓↑↓</span> and <span class=gamenode>KQ↓↑↓</span>, though in this case they're both <span class="player_label p1">-1</span> and the EV doesn't depend on the composition weights of the infoset (since he folds and loses exactly one chip either way).

With these expected values, <span class="player p1"></span>'s "local best response" at this infoset (holding everything else about both strategies constant) is to play <span class=action>↑Up</span> 100% of the time.

:::{.callout-note  appearance="minimal"}
## Exercise

How much should <span class="player p1"></span>'s expected value from the whole game (a random deal) increase if he moves from playing <span class=action>↑Up</span> ("calling the bet") at <span class="infoset p1">K_↓↑</span> 50% of the time to 100% instead? Once you've figured out what you expect the answer to be, set the strategy probability to 100% in the text box above and check your answer.
:::
      
But what if the probabilities of reaching <span class="infoset p1">K_↓↑</span> via <span class=gamenode>KA↓↑</span> versus <span class=gamenode>KQ↓↑</span> aren't equal? If the players <em>don't</em> play 50-50 randomly, then we'll have to separately calculate the probability of reaching <span class=gamenode>KA↓↑</span> (including the probability of the initial <span class=gamenode>KA</span> deal) and the probability of reaching <span class=gamenode>KQ↓↑</span> (likewise); the composition of the infoset will be proportional to the the probabilities of reaching these states&mdash;as we'll see in our next example. *(In larger games, we might approximate these reach-state probabilities by sampling games with simulated play instead of calculating them analytically.)*

### Example 2: Changing local best responses

Consider <span class="player p2"></span>'s actions at <span class="infoset p2">_Q↓</span> ("having a <span class=gamenode>Q</span> facing a check"). If <span class="player p2"></span> plays <span class=action>↓Down</span> (action sequence: "check&ndash;check"), he will go to a 1-chip showdown, always have the worse card, and get a payoff of <span class="player_label p2">-1.0</span> (<span class="player_label p1">+1.0</span>). If he plays <span class=action>↑Up</span> ("bets"), then it will be <span class="player p1"></span>'s turn to act.

If <span class="player p1"></span> were to play randomly at <span class="infoset p1">K_↓↑</span>, then <span class="player p2"></span>'s <span class=action>↑Up</span> would get a payoff of <span class="player_label p2">-0.5</span> (<span class="player_label p1">+0.5</span>), since half the time <span class="player p1"></span> will play <span class=action>↓Down</span> ("fold", <span class="player_label p2">+1</span>) and half the time he will <span class=action>↑Up</span> ("call", showdown, <span class="player_label p2">-2</span>). 

Note that <span class="player p2"></span>'s <span class=gamenode>Q</span> is always the worse hand and an <span class=action>↑Up</span> action is a <abbr title ="Betting with a weak hand with the goal of making the opponent fold">*bluff*</abbr>, but if <span class="player p1"></span> plays <span class=action>↓Down</span> ("folds") often enough, then <span class="player p2"></span> can win enough <span class="player_label p2">+1</span>s to do better than always taking a 1-chip showdown.

But recall that in the previous section, we thought <span class="player p1"></span> should <em>always</em> play <span class=action>↑Up</span> at <span class="infoset p1">K_↓↑</span>. In that case, <span class="player p2"></span>'s payoff for playing <span class=action>↑Up</span> at <span class="infoset p2">_Q↓</span> becomes <span class="player_label p2">-1.25</span> (<span class="player_label p1">+1.25</span>), worse than <span class="player_label p2">-1</span> for playing <span class=action>↓Down</span>, and so he should play <span class=action>↓Down</span> instead of <span class=action>↑Up</span>.

<div class="duplicate_K_↓↑" style="display:inline-block"></div>

<div class="duplicate__Q↓" style="display:inline-block"></div>

<div class="duplicate_player_evs"></div>

:::{.callout-note  appearance="minimal"}
## Exercise: Entangled strategies

Reset the probabilities, then set the <span class="infoset p1">K_↓↑</span> strategy probability to <span class="player p1"></span>'s local best response. Then set the <span class="infoset p2">_Q↓</span> strategy prob to <span class="player p2"></span>'s local best response. What has happened to <span class="player p1"></span>'s local best response?
:::


:::{.callout-note  appearance="minimal"}
## Exercise: Regret-free mixed strategies

Set the <span class="infoset p1">K_↓↑</span> and <span class="infoset p2">_Q↓</span> strategy probabilities to a pair of values such that neither player has <abbr title="Recall that a player has regret if they take an action with lower EV than an alternative. So a player will have no regret if they always take the higher-EV action, or if they mix between actions with equally-highest EV.">regret</abbr>.
:::

This example shows the core difference between solving perfect-information games and imperfect-information games. In Kuhn Poker, when a random <span class="player p2"></span> switches to only playing <span class=action>↓Down</span> at <span class="infoset p2">_Q↓</span>, <span class="player p1"></span>'s payoff EVs at <span class="infoset p1">K_↓↑</span> change (because now that infoset is only composed of <span class="gamenode">KA↓↑</span> and no <span class="gamenode">KQ↓↑</span>). With the resulting EVs, <span class="player p1"></span> has a payoff of <span class="player_label p1">-2</span> for playing <span class=action>↑Up</span>, and should play <span class=action>↓Down</span> to get <span class="player_label p1">-1</span> instead. (But now <span class="player p2"></span> should...)

In a perfect information game, we can find each player's best action in each game situation inductively, by passing up the tree from the end-states and determining each situation in terms of known solutions to its successor nodes. And whatever the best thing to do at the downtree node was, it'll still be the best thing to do, regardless of how we get there.

But in an imperfect information game, changing an uptree strategy parameter can change what the best response is at downtree infosets, so we can't solve a game in a single pass from the endgames to the beginning. Nearly every game-solving technique for imperfect information games, then, is based on taking a strategy for each player and iteratively improving on both based on local improvements until they resolve on something like a Nash equilibrium.

Recall the two types of uncertainty in an imperfect-information game:

1. Uncertainty about which node we are actually in (depending on strategy and chance probabilities upwards in the game tree).

2. Uncertainty about what happens after an action (depending on the strategy and chance probabilites downwards in the game tree).

## Challenge

The goal of this challenge is to find optimal strategies for Kuhn Poker in terms of the fixed action probabilities at each player's 6 infosets. For this challenge, we recommend that you submit strategies that form a Nash equilibrium (or equivalently, a pair of strategies such that neither player has regret). You will submit strategies for both players (12 probabilities total) and be matched against many opponents (but not yourself); your average score across all matchups will be the basis of your leaderboard rank. For each opponent, you will play an equal number of times as <span class="player p1"></span> and as <span class="player p2"></span>.

### Part 1: Manual Solutions
:::{.callout-note  appearance="minimal"}
## Challenge part 1: Kuhn Poker (manual solutions)

Use the boxes below to find a pair of no-regret strategies in the boxes below for <span class="player p1"></span> and <span class="player p2"></span>.
:::

When you get a pair of strategies such that each infoset is at most 0.1 chips of EV away from regret-free, a link to the next stage will appear at the bottom of the page. You will be able to fine-tune your strategy in the next stage before submitting it to the leaderboard.
    
<div id="tree_visualization_400b" class="tree_visualization"></div>

<div style="display:none">
<div style="display: inline-block; margin: 1em;">
  <button id="start_simulator" style="padding: 0.5em 1em;" onclick="startSimulator()">Run Solver</button>
</div>
<div style="display: inline-block; margin: 1em;">
  <label for="update_mode" style="margin-right: 0.5em;">Update mode:</label>
  <select id="update_mode" style="padding: 0.2em;">
    <option value="1.0" selected="selected">100% CFR</option>
    <option value="0.1">10% CFR</option>
    <option value="0.01">1% CFR</option>
    <option value="0.001">0.1% CFR</option>
    <option value="0.0001">0.0001% CFR</option>
    <option value="0.00001">0.00001% CFR</option>
  </select>
</div>

<div style="display: inline-block; margin: 1em;">
  <label for="num_iterations" style="margin-right: 0.5em;">Iterations:</label>
  <select id="num_iterations" style="padding: 0.2em;">
    <option value="1" selected="selected">1</option>
    <option value="10">10</option>
    <option value="100">100</option>
    <option value="1000">1,000</option>
    <option value="10000">10,000</option>
    <option value="100000">100,000</option>
  </select>
</div>
      
<div style="display: inline-block; margin: 1em;">
  <label for="wait_per_step" style="margin-right: 0.5em;">Speed:</label>
  <select id="wait_per_step" style="padding: 0.2em;">
    <option value="0" selected="selected">Max</option>
    <option value="10">Fast</option>
    <option value="100">10/sec</option>
    <option value="1000">1/sec</option>
  </select>
</div>
      
<div style="display: inline-block; margin: 1em;">
  <label for="tolerance" style="margin-right: 0.5em;">Tolerance:</label>
  <select id="tolerance" style="padding: 0.2em;">
    <option value="0.01">0.01</option>
    <option value="0.03">0.03</option>
    <option value="0.1" selected="selected">0.1</option>
    <option value="0.3">0.3</option>
</select>
</div>
</div>

<style>
  .p, .regret { display: none; }
</style>
<div id="subtree_visualizations" style="max-width: 750px;"></div>

### Part 2: Automatic Solver


<script>
  function unlock_next() {
    document.querySelectorAll(".lock_this").forEach(element => {element.style.display = ""});
    document.querySelectorAll(".locked_message").forEach(element => {element.style.display = "none"});
  };
</script>
<div class="locked_message">
  &lt;This section is locked until you complete part 1.&gt;
  
  <button id="cheat_unlock_next" onclick="unlock_next()">Cheat</button>
</div>
<div class="lock_this" style="display:none">
  <p><a href=1kuhn_challenge2.html>Enter Part 2 (unlocked) &rarr;</a></p>
</div>

<script src="index.js"></script>
<script>
  /* global create_tree */
  create_tree("tree_visualization_075", 0.75);
  create_tree("tree_visualization_100", 1.0);
  create_tree("tree_visualization_150", 1.50);
  create_tree("tree_visualization_175", 1.75);
  create_tree("tree_visualization_200", 2.0);
  create_tree("tree_visualization_250", 2.5);
  create_tree("tree_visualization_275", 2.75);
  create_tree("tree_visualization_300", 3.0);
  create_tree("tree_visualization_350", 3.5);
  create_tree("tree_visualization_400a", 4.0);
  create_tree("tree_visualization_400b", 4.0, true);
</script>
