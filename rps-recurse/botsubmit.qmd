---
title: "RPS Hackathon @ Recurse: Submit"
sidebar: rps-hackathon-recurse
bread-crumbs: false
format:
  html:
    math: false
    header-includes:
      <script src="/login/auth.js"></script>
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
      <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
---
<style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
    #user-bar {
        position: absolute;
        top: 70px;
        right: 10px;
        display: inline-flex;
        align-items: center;
        background-color: #f1f1f1;
        padding: 5px 5px;
        border-radius: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    #user-bar img {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 10px;
    }
    #user-bar span {
        margin-right: 10px;
    }
    .dropdown {
        position: relative;
        display: inline-block;
    }
    .dropdown-content {
        display: none;
        position: absolute;
        right: 0;
        background-color: #f9f9f9;
        min-width: 120px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        z-index: 1;
        border-radius: 4px;
    }
    .dropdown:hover .dropdown-content { display: block; }
    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
    }
    .dropdown-content a:hover { background-color: #f1f1f1; border-radius: 4px; }
    
    button.submit {
        padding: 8px 16px;
        margin-bottom: 10px;
        font-size: 14px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    
    .tab {
        overflow: hidden;
        background-color: #f0f0f0;
        display: flex;
    }
    .tab button {
        background-color: #e0e0e0;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
        flex-grow: 1;
        border-radius: 10px 10px 0 0;
        margin-right: 2px;
        border: 1px solid #ccc;
        border-bottom: none;
    }
    .tab button:last-child {
        margin-right: 0;
    }
    .tab button:hover {
        background-color: #ddd;
    }
    .tab button.active {
        background-color: #fff;
    }
    .tabcontent {
        display: none;
        padding: 10px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-top: none;
        border-radius: 0 0 10px 10px;
    }
    
    .interactive-python-container * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-size: 1em;
    }
    .interactive-python-container {
        font-family: Arial, sans-serif;
        max-width: 800px;
        padding: 10px;
        background-color: #f0f0f0;
        border-radius: 5px;
    }
    .interactive-python-container h1 {
        font-size: 1.5em;
        margin-bottom: 15px;
    }
    .code-scroll-container {
        overflow-x: auto;
        background-color: #f0f0f0;
        border-radius: 5px;
    }
    .code-container {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        font-size: 14px;
        line-height: 1.5;
        white-space: nowrap;
        min-width: 100%;
    }
    .code-line {
        display: flex;
        align-items: flex-start;
    }
    .editable {
        flex-grow: 1;
        font-family: inherit;
        font-size: inherit;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 1px 5px;
        margin: 1px 0;
        resize: none;
        overflow: hidden;
        line-height: inherit;
        height: 1.5em;
    }
    .interactive-python-container button:hover {
        background-color: #45a049;
    }
    pre {
        margin: 0 !important;
        padding: 0 !important;
        background-color: transparent !important;
        display: inline;
    }
    code {
        white-space: pre !important;
    }
    .hljs {
        background: transparent;
        padding: 0;
    }
</style>

<div id="user-bar"></div>

<div class="tab">
<button class="tablinks" onclick="openTab(event, 'Edit Code')" id="defaultOpen">Edit Code</button>
<button class="tablinks" onclick="openTab(event, 'Upload File')">Upload File</button>
<button class="tablinks" onclick="openTab(event, 'Link Repo')">Link Repo</button>
</div>

<script>
  // Function to initialize CodeMirror editors for each editable textarea
  function initializeEditors() {
    const editors = [
      { id: 'imports', mode: 'python' },
      { id: 'classlevel', mode: 'python' },
      { id: 'init', mode: 'python' },
      { id: 'handle_results', mode: 'python' },
      { id: 'get_action', mode: 'python' }
    ];

    editors.forEach(editor => {
      CodeMirror.fromTextArea(document.getElementById(editor.id), {
        lineNumbers: true,
        mode: editor.mode,
        theme: "default",
        indentUnit: 4,
        tabMode: "indent"
      });
    });
  }

  // Call this function when the page loads
  document.addEventListener('DOMContentLoaded', function() {
    initializeEditors();
  });
</script>
<!-- 
<div id="Edit Code" class="tabcontent">
  <button class="submit" onclick="submitCode()">Submit</button>
  <div class="interactive-python-container">
    <div class="code-scroll-container">
      <div class="code-container">
        <div class="code-line"><pre><code class="language-python">from skeleton.actions import RockAction, PaperAction, ScissorsAction
from skeleton.bot import Bot
from skeleton.runner import parse_args, run_bot</code></pre></div>

        <div class="code-line"><textarea class="editable" id="imports">import random</textarea></div>

        <div class="code-line"><pre><code class="language-python">
class Player(Bot):
</code></pre></div>

        <div class="code-line"><textarea class="editable" id="classlevel"></textarea></div>

        <div class="code-line"><pre><code class="language-python">    def __init__(self):</code></pre></div>
        <div class="code-line"><textarea class="editable" id="init"># Called when a new matchup starts. Called exactly once.
self.my_profit = 0
self.history = []</textarea></div>

        <div class="code-line"><pre><code class="language-python">    def handle_results(self, *, my_action, their_action, my_payoff, match_clock):</code></pre></div>
        <div class="code-line"><textarea class="editable" id="handle_results"># Called after a round. Called NUM_ROUNDS times.
self.history.append((my_action, their_action))
self.my_profit += my_payoff</textarea></div>

        <div class="code-line"><pre><code class="language-python">    def get_action(self, *, match_clock):</code></pre></div>
        <div class="code-line"><textarea class="editable" id="get_action"># Where the magic happens.
# Called when the engine needs an action from your bot, NUM_ROUNDS times in total.
# Should return a RockAction(), PaperAction(), or ScissorsAction().
return random.choice([RockAction(), PaperAction(), ScissorsAction()])</textarea></div>

        <div class="code-line"><pre><code class="language-python">
if __name__ == '__main__':
    run_bot(Player(), parse_args())</code></pre></div>
      </div>
    </div>
  </div>
</div> -->



<div id="Edit Code" class="tabcontent">
<button class="submit" onclick="submitCode()">Submit</button>
<div class="interactive-python-container">
<div class="code-scroll-container">
<div class="code-container">
<div class="code-line"><pre><code class="language-python">from skeleton.actions import RockAction, PaperAction, ScissorsAction
from skeleton.bot import Bot
from skeleton.runner import parse_args, run_bot

</code></pre></div><div class="code-line"><textarea class="editable" id="imports" indent=0>
import random</textarea></div><div class="code-line"><pre><code class="language-python">
class Player(Bot):
</code></pre></div><div class="code-line"><pre><code class="language-python">    </code></pre><textarea class="editable" id="classlevel" indent=4>

</textarea></div><div class="code-line"><pre><code class="language-python">
    def __init__(self):</code></pre></div>
<div class="code-line"><pre><code class="language-python">        </code></pre><textarea class="editable" id="init" indent=8># Called when a new matchup starts. Called exactly once.

self.my_profit = 0
self.history = []</textarea></div>
<div class="code-line"><pre><code class="language-python">
    def handle_results(self, *, my_action, their_action, my_payoff, match_clock):</code></pre></div>
<div class="code-line"><pre><code class="language-python">        </code></pre><textarea class="editable" id="handle_results" indent=8># Called after a round. Called NUM_ROUNDS times.

self.history.append((my_action, their_action))
self.my_profit += my_payoff</textarea></div>
<div class="code-line"><pre><code class="language-python">
    def get_action(self, *, match_clock):</code></pre></div>
<div class="code-line"><pre><code class="language-python">        </code></pre><textarea class="editable" id="get_action" indent=8># Where the magic happens.
# Called when the engine needs an action from your bot, NUM_ROUNDS times in total.
#
# Should return a RockAction(), PaperAction(), or ScissorsAction().

return random.choice([RockAction(), PaperAction(), ScissorsAction()])</textarea></div>
<div class="code-line"><pre><code class="language-python">
if __name__ == '__main__':
    run_bot(Player(), parse_args())</code></pre></div>
</div>
</div>
</div>
</div>

<div id="Upload File" class="tabcontent">
<form id="uploadForm" enctype="multipart/form-data">
<div style="margin-bottom:5px"><input type="file" id="file" name="file" accept=".py" required></div>
<button type="submit" class="submit">Upload File</button><span id="uploadStatus"></span>
</form>

---

The file you upload should be a python file that looks something like this:
<div class="interactive-python-container"><pre># Simple example bot, written in Python.

from skeleton.actions import RockAction, PaperAction, ScissorsAction
from skeleton.bot import Bot
from skeleton.runner import parse_args, run_bot

import random

class Player(Bot):
    # A bot for playing Rock-Paper-Scissors.

    def __init__(self):
        # Called when a new matchup starts. Called exactly once.
        
        self.my_profit = 0
        self.history = []

    def handle_results(self, *, my_action, their_action, my_payoff, match_clock):
        # Called after a round. Called NUM_ROUNDS times.
        
        self.history.append((my_action, their_action))
        self.my_profit += my_payoff

    def get_action(self, *, match_clock):
        # Where the magic happens. Called when the engine needs an action from
        # your bot. Called NUM_ROUNDS times.
        #
        # Returns a RockAction(), PaperAction(), or ScissorsAction().
        
        return random.choice([RockAction(), PaperAction(), ScissorsAction()])

if __name__ == '__main__':
    run_bot(Player(), parse_args())
</pre></div>
</div>

<div id="Link Repo" class="tabcontent">
<p>Coming soon! Ask if you'd like to use this to upload multiple files or something else that doesn't fit into a `player.py` file.</p>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/autoloader/prism-autoloader.min.js"></script>

<script>
    function openTab(evt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen").click();
</script>

<script>
    // Autosave functionality
    var enable_autosave = false;
    
    function autoSave() {
        if (!enable_autosave) {
          return;
        }
        
        console.log('autosave');
        const editableFields = document.querySelectorAll('.interactive-python-container .editable');
        const saveData = {};
    
        editableFields.forEach((field) => {
            saveData[field.id] = field.value;
        });
    
        localStorage.setItem('autosaveData', JSON.stringify(saveData));
    }
    
    // Load saved data
    function loadSavedData() {
        console.log('load');
        const savedData = localStorage.getItem('autosaveData');
        console.log(savedData);
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            Object.keys(parsedData).forEach((key) => {
                const field = document.getElementById(key);
                if (field) {
                    field.value = parsedData[key];
                    adjustTextareaHeight(field);
                }
            });
        }
        
        enable_autosave = true;
    }
        
    setInterval(autoSave, 3000); // 3 seconds
    
    // Load saved data when the page loads
    window.addEventListener('load', loadSavedData);
    
    function adjustTextareaHeight(textarea) {
        textarea.style.height = '1.5em';
        textarea.style.height = (textarea.scrollHeight) + 'px';
        autoSave();
    }

    document.querySelectorAll('.editable').forEach(textarea => {
        adjustTextareaHeight(textarea);
        ['input', 'keyup'].forEach(event => {
            textarea.addEventListener(event, function() {
                adjustTextareaHeight(this);
            });
        });
    });

    Prism.highlightAll();

    function submitCode() {
        autoSave();
        const editableFields = document.querySelectorAll('.interactive-python-container .editable');
        const username = localStorage.getItem('github_username') || 'unknown';
        const token = localStorage.getItem('github_oauth_token') || 'unknown';
        
        const data = {
            'username': username,
            'token': token,
            'snippets': {}
        };
        
        editableFields.forEach((field) => {
            data['snippets'][field.id] = {
                'contents': field.value,
                'indent': parseInt(field.getAttribute('indent'))
            };
        });
    
        fetch('https://staff-dev1.poker.camp:8443/submit-rps-hackathon-20240908', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Success:', data);
            alert('Code submitted successfully!');
        })
        .catch((error) => {
            console.error('Error:', error);
            alert('Error submitting code. Please try again.');
        });
    }
</script>

<script>
document.getElementById('uploadForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData();
    const fileField = document.querySelector('input[type="file"]');
    const username = localStorage.getItem('github_username') || 'unknown';
    const token = localStorage.getItem('github_oauth_token') || 'unknown';
    
    formData.append('file', fileField.files[0]);
    formData.append('username', username);
    formData.append('token', token);

    fetch('https://staff-dev1.poker.camp:8443/upload-rps-hackathon-20240908', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(result => {
        document.getElementById('uploadStatus').textContent = 'Success: ' + result.message;
        console.log('Success:', result);
    })
    .catch(error => {
        document.getElementById('uploadStatus').textContent = 'Error: ' + error.message;
        console.error('Error:', error);
    });
});
</script>
